g2x[2] <- -x[1] + 2*x[2] -4
return(g2x)
}
obj2 <- list(functionObj = f2,
f = f2,
g = g2)
x2 <- list(x = c(0, 0),
fx = f2(c(0, 0)))
f3 <- function(x){
fx <- x[1]^4 - 2*(x[1]^2)*x[2] + x[1]^2 +x[1]*(x[2]^2) - 2*x[1] +4
return (fx)
}
h3 <- function(x){
hx <- x[1]^2 + x[2]^2 -2
return(hx);
}
g3 <- function(x){
g <- 0.25*x[1]^2 + 0.75*x[2]^2 - 1;
return(g);
}
obj3 <- list(functionObj = f3,
f = f3,
g = g3,
h = h3)
x3 <- list(x = c(2, -4),
fx = f2(c(2, -4)))
SUMT(x1, obj1, rho0 = 0.2, c = 100)
devtools::load_all()
SUMT(x1, obj1, rho0 = 0.2, c = 100)
SUMT(x1, obj1, rho0 = 0.2, c = 100, method = "goldensection")
SUMT(x1, obj1, rho0 = 0.2, c = 100)
SUMT(x1, obj1,  method = "goldensection")
SUMT(x2, obj2,  method = "goldensection")
SUMT(x3, obj3,  method = "goldensection")
SUMT(x2, obj2,  method = "goldensection")
SUMT(x3, obj3,  method = "goldensection")
SUMT(x2, obj2,  method = "goldensection")
SUMT(x1, obj1)
SUMT(x2, obj2)
SUMT(x3, obj3)
SUMT(x3, obj3, method = "quadraticinterpolation")
SUMT(x3, obj3)
library("devtools")
load_all()
SUMT(x3, obj3)
SUMT(x2, obj2)
SUMT(x1, obj1)
SUMT(x1, obj1, method = "quadraticinterpolation")
SUMT(x3, obj3)
load_all()
SUMT(x1, obj1, method = "quadraticinterpolation")
load_all()
SUMT(x1, obj1, method = "quadraticinterpolation")
SUMT(x1, obj1, method = "goldensection")
SUMT(x2, obj2, method = "goldensection")
SUMT(x1, obj1, method = "goldensection")
SUMT(x2, obj2, method = "goldensection")
SUMT(x3, obj3, method = "goldensection")
SUMT(x2, obj2, method = "goldensection")
SUMT(x3, obj3, method = "goldensection")
SUMT(x2, obj2, method = "goldensection")
SUMT(x1, obj1, method = "quadraticinterpolation")
SUMT(x2, obj2, method = "quadraticinterpolation")
SUMT(x3, obj3, method = "quadraticinterpolation")
SUMT(x2, obj2, method = "quadraticinterpolation")
z <- 1
z <- as.vector(z)
z
load_all()
SUMT(x2, obj2, method = "quadraticinterpolation")
SUMT(x2, obj2, method = "quadraticinterpolation")
load_all()
SUMT(x2, obj2, method = "quadraticinterpolation")
SUMT(x1, obj1, method = "quadraticinterpolation")
SUMT(x2, obj2, method = "goldensection")
SUMT(x2, obj2)
SUMT(x3, obj3)
SUMT(x3, obj3, method = "goldensection")
SUMT(x3, obj3)
SUMT(x3, obj3, method = "quadraticinterpolation")
SUMT(x1, obj1, method = "quadraticinterpolation")
SUMT(x1, obj1, method = "goldensection")
SUMT(x1, obj1)
load_all()
SUMT(x2, obj2, method = "quadraticinterpolation")
SUMT(x2, obj2, method = "goldensection")
SUMT(x2, obj2)
SUMT(x3, obj3)
SUMT(x3, obj3, method = "quadraticinterpolation")
SUMT(x3, obj3, method = "goldensection")
SUMT(x3, obj3)
SUMT(x1, obj1)
SUMT(x1, obj1, method = "quadraticinterpolation")
SUMT(x1, obj1, method = "goldensection")
library("devtools")
load_all()
SUMT(x1, obj1, method = "goldensection")
SUMT(x1, obj1, method = "quadraticinterpolation")
SUMT(x1, obj1)
SUMT(x2, obj2, method = "goldensection")
SUMT(x2, obj2, method = "quadraticinterpolation")
SUMT(x3, obj3, method = "goldensection")
SUMT(x3, obj3, method = "quadraticinterpolation")
SUMT(x3, obj3)
SUMT(x3, obj3, method = "quadraticinterpolation", maxNI = 200)
SUMT(x2, obj2, method = "quadraticinterpolation", maxNI = 200)
load_all()
SUMT(x2, obj2, method = "quadraticinterpolation", maxNI = 200)
SUMT(x2, obj2, method = "goldensection", maxNI = 200)
SUMT(x2, obj2, maxNI = 200)
load_all()
SUMT(x2, obj2, method = "goldensection", maxNI = 200)
SUMT(x2, obj2, method = "quadraticinterpolation", maxNI = 200)
p(obj1, rho = 10)
p(c(0,0))
p <- function(obj.list, rho)
{
function (x) {
Fx <- obj.list$f(x)
#Validation
if(!("g") %in% names(obj.list)) {
Gx <- 0
} else {
Gx <- obj.list$g(x)
}
if(!("h") %in% names(obj.list)) {
Hx <- 0
} else {
Hx <- obj.list$h(x)
}
Gx <- as.vector(Gx)
Hx <- as.vector(Hx)
g <- 0
for(i in length(Gx)) {
g <- g + rho*max(Gx[i]^2, 0)
}
h <- 0
for(i in length(Hx)) {
h <- h + rho*(Hx[i]^2)
}
p <- Fx + g + h
#p <- Fx + rho*sum(Hx^2) + rho*sum(max(Gx^2, 0))
return(p)
}
}
p(obj1, rho = 10)
p <- function(obj.list, rho)
{
function (x) {
Fx <- obj.list$f(x)
#Validation
if(!("g") %in% names(obj.list)) {
Gx <- 0
} else {
Gx <- obj.list$g(x)
}
if(!("h") %in% names(obj.list)) {
Hx <- 0
} else {
Hx <- obj.list$h(x)
}
Gx <- as.vector(Gx)
Hx <- as.vector(Hx)
g <- 0
for(i in length(Gx)) {
g <- g + rho*max(Gx[i]^2, 0)
}
h <- 0
for(i in length(Hx)) {
h <- h + rho*(Hx[i]^2)
}
p <- Fx + g + h
#p <- Fx + rho*sum(Hx^2) + rho*sum(max(Gx^2, 0))
return(p)
}
}
p(c(0,0))
p
z <- p(obj1, 10)
z(c(1,1))
z(x = (-1,1))
z(x = c(-1,1))
z(x = c(-1,0))
obj.list
obj.list1
obj1
x.list
x1
output
output <- checkparameters(obj1, x1)
obj.list <- ouptut[[1]]
obj.list <- output[[1]]
obj.list
obj.list$gradientObj(c(1,2))
obj.list$gradientObj(c(1,2), obj.list$functionObj)
obj.list$gradientObj(c(1,2), obj.list$f)
obj.list$gradientObj(x = c(1,2), f = obj.list$f)
obj.list
SUMT(x2, obj2, method = "goldensection", maxNI = 200)
SUMT(x2, obj2, method = "quadraticinterpolation", maxNI = 200)
SUMT(x2, obj2, maxNI = 200)
p
z
z <- p(obj1, rho = 1e6)
z
z <- p(obj2, rho = 1e6)
z
z(c(0,0))
obj2$g(c(0,0))
load_all()
p <- function(obj.list, rho)
{
function (x) {
Fx <- obj.list$f(x)
#Validation
if(!("g") %in% names(obj.list)) {
Gx <- 0
} else {
Gx <- obj.list$g(x)
}
if(!("h") %in% names(obj.list)) {
Hx <- 0
} else {
Hx <- obj.list$h(x)
}
Gx <- as.vector(Gx)
Hx <- as.vector(Hx)
g <- 0
for(i in length(Gx)) {
g <- g + rho*max(Gx[i], 0)^2
}
h <- 0
for(i in length(Hx)) {
h <- h + rho*(Hx[i]^2)
}
p <- Fx + g + h
#p <- Fx + rho*sum(Hx^2) + rho*sum(max(Gx^2, 0))
return(p)
}
}
z <- p(obj2, rho = 1e6)
z
z(c(0,0))
SUMT(x2, obj2, method = "quadraticinterpolation", maxNI = 200)
SUMT(x2, obj2, method = "goldensection", maxNI = 200)
SUMT(x2, obj2, maxNI = 200)
z(c(5, 3))
z
p
obj2.g(c(0,0))
obj2$g(c(0,0))
obj2$g(c(5,3))
load_all()
# for(i in length(Gx)) {
#   g <- g + rho*max(Gx[i], 0)^2
# }
#
# h <- 0
# for(i in length(Hx)) {
#   h <- h + rho*(Hx[i]^2)
# }
#
# p <- Fx + g + h
p <- Fx + rho*sum(Hx^2) + rho*sum(max(Gx, 0)^2)
return(p)
g1 <- function(x)
{
gx <- c()
gx[1] <- 1 - x[1]
gx[2] <- -x[2]
return(gx)
}
f1 <- function(x) {
return((1/3)*(x[1] + 1)^3 + x[2])
}
obj1 <- list(functionObj = f1,
f = f1,
g = g1)
x1 <- list(x = c(2, 1),
fx = f1(c(2, 1)))
#Exemplo 2 -> tp campelo 2017/2
f2 <- function(x) {
return((x[1] - 5)^2 + (x[2] - 3)^2)
}
g2 <- function(x) {
g2x <- c()
g2x[1] <- x[1] + x[2] -3
g2x[2] <- -x[1] + 2*x[2] -4
return(g2x)
}
obj2 <- list(functionObj = f2,
f = f2,
g = g2)
x2 <- list(x = c(0, 0),
fx = f2(c(0, 0)))
#Exemplo 3 -> tp campelo 2017/2
f3 <- function(x){
fx <- x[1]^4 - 2*(x[1]^2)*x[2] + x[1]^2 +x[1]*(x[2]^2) - 2*x[1] +4
return (fx)
}
h3 <- function(x){
hx <- x[1]^2 + x[2]^2 -2
return(hx);
}
g3 <- function(x){
g <- 0.25*x[1]^2 + 0.75*x[2]^2 - 1;
return(g);
}
obj3 <- list(functionObj = f3,
f = f3,
g = g3,
h = h3)
x3 <- list(x = c(2, -4),
fx = f2(c(2, -4)))
SUMT(x2, obj2, method = "goldensection", maxNI = 200)
obj2$f
z <- p(obj2, rho = 1e6)
z(c(8,3))
z(c(5,3))
z(c(0,0))
z(c(5,3))
SUMT(x2, obj2, method = "goldensection", maxNI = 200)
SUMT(x2, obj2, method = "goldensection", maxNI = 200)
SUMT(x2, obj2, method = "quadraticinterpolation", maxNI = 200)
z
obj2$functionObj()
obj2$functionObj
obj2$functionObj <- z
obj2
obj2$functionObj(c(3,5))
x.list <- list(x=c(0,0))
x.list
x1
quasiNewton(obj2, x.list)
quasiNewton(obj2, x.list)
x.list$fx <- z(x.list$x)
quasiNewton(obj2, x.list)
xopt <- c(2.4997079, 0.5002942)
obj2.f(xopt)
obj2$f(xopt)
obj2$g(xopt)
quasiNewton(obj2, x.list, method = "goldensection")
quasiNewton(obj2, x.list, method = "quadraticinterpolation")
quasiNewton(obj2, x.list, method = "backtracking")
quasiNewton(obj2, x.list)
z <- (obj1, rho = 1e6)
z <- p(obj1, rho = 1e6)
obj1$functionObj <- z
x1.list <- list(x = c(-1, -1), fx = z(c(-1,-1)))
quasiNewton(obj1, x1.list)
quasiNewton(obj1, x1.list)
obh1
obj1
x1.list
quasiNewton(obj1, x1.list)
quasiNewton(obj1, x1.list)
x1
x0 <- c(0, 1)
x1.list <- list(x = x0, fx = z(x0))
x1.list
quasiNewton(obj1, x1.list)
quasiNewton(obj1, x1.list, method = "goldensection")
quasiNewton(obj1, x1.list, method = "quadraticinteporlation")
quasiNewton(obj1, x1.list, method = "quadraticinterpolation")
conjugateGradient(obj1, x1.list, method = "quadraticinterpolation")
conjugateGradient(obj1, x1.list, method = "goldensection")
conjugateGradient(obj1, x1.list)
load_all()
load_all()
load_all()
#Functions Test for quasinewton and conjugateGradient
#Function 1 x* = [1,1,1] f(x*) = 0
f1 <- function(x) {
f1 <- x[1]^2 + 2*x[2]^2 + 3*x[3]^2 - 2*x[1] -4*x[2] -6*x[3] + 6
return(f1)
}
x1.list <- list(x = c(3,3,3), fx = f1(c(3,3,3)))
#Function 2 x* = [1,1], f1(x*) = 0
f2 <- function(x) {
f2 <- x[1]^4 - 2*(x[1]^2)*x[2] + x[1]^2 + x[2]^2 - 2*x[1] + 1
return(f2)
}
x2.list <- list(x = c(3,3), fx = f2(c(3,3)))
f3 <- function(x) {
f3 <- x[1]^4 - 8*x[1]^3 + 25*(x[1]^2) + 4*(x[2]^2) -4*x[1]*x[2] -32*x[1] + 16
return(f3)
}
x3.list <- list(x = c(3,3), fx = f3(c(3,3)))
#Function 4 x* = [1,1] f(x*) = 0
f4 <- function(x) {
f4 <- 100*(x[2] - x[1]^2)^2 + (1 - x[1])^2
return(f4)
}
x4.list <- list(x = c(1,1), fx = f4(c(1,1)))
#Function 5 - x* = [0.57085, -0.93955591, 0.7681755]
f5 <- function(x) {
f5 <- x[1]^4 + x[1]^3 - x[1] + x[2]^4 - x[2]^2 + x[2] + x[3]^2 - x[3] + x[1]*x[2]*x[3]
return(f5)
}
x5.list <- list(x = c(1,-1,1), fx = f5(c(1,-1,1)))
obj1 <- list(functionObj = f1)
quasiNewton(obj1, x1.list)
quasiNewton(obj1, x1.list, method = "quadraticinterpolation")
quasiNewton(obj1, x1.list, method = "goldensection")
#Function 2 x* = [1,1], f1(x*) = 0
f2 <- function(x) {
f2 <- x[1]^4 - 2*(x[1]^2)*x[2] + x[1]^2 + x[2]^2 - 2*x[1] + 1
return(f2)
}
x2.list <- list(x = c(3,3), fx = f2(c(3,3)))
obj2 <- list(functionObj = f2)
quasiNewton(obj2, x2.list)
quasiNewton(obj2, x2.list, method = "quadraticinterpolation")
quasiNewton(obj2, x2.list, method = "goldensection")
conjugateGradient(obj1, x1.list)
conjugateGradient(obj1, x1.list, method = "goldensection")
conjugateGradient(obj1, x1.list, method = "quadraticinterpolation")
conjugateGradient(obj2, x2.list)
conjugateGradient(obj2, x2.list, method = "quadraticinterpolation")
conjugateGradient(obj2, x2.list, method = "goldensection")
f3 <- function(x) {
f3 <- x[1]^4 - 8*x[1]^3 + 25*(x[1]^2) + 4*(x[2]^2) -4*x[1]*x[2] -32*x[1] + 16
return(f3)
}
x3.list <- list(x = c(3,3), fx = f3(c(3,3)))
obj3 <- list(functionObj = f3)
quasiNewton(obj3, x3.list)
quasiNewton(obj3, x3.list, method = "quadraticinterpolation")
quasiNewton(obj3, x3.list, method = "goldensection")
conjugateGradient(obj3, x3.list, method = "goldensection")
conjugateGradient(obj3, x3.list, method = "quadraticinterpolation")
conjugateGradient(obj3, x3.list)
#Function 4 x* = [1,1] f(x*) = 0
f4 <- function(x) {
f4 <- 100*(x[2] - x[1]^2)^2 + (1 - x[1])^2
return(f4)
}
x4.list <- list(x = c(1,1), fx = f4(c(1,1)))
obj4 <- list(functionObj = f4)
quasiNewton(obj4, x4.list)
quasiNewton(obj4, x4.list, method = "quadraticinterpolation")
quasiNewton(obj4, x4.list, method = "goldensection")
conjugateGradient(obj4, x4.list)
conjugateGradient(obj4, x4.list, method = "goldensection")
conjugateGradient(obj4, x4.list, method = "quadraticinterpolation")
#Function 5 - x* = [0.57085, -0.93955591, 0.7681755]
f5 <- function(x) {
f5 <- x[1]^4 + x[1]^3 - x[1] + x[2]^4 - x[2]^2 + x[2] + x[3]^2 - x[3] + x[1]*x[2]*x[3]
return(f5)
}
x5.list <- list(x = c(1,-1,1), fx = f5(c(1,-1,1)))
obj5 <- list(functionObj = f5)
quasiNewton(obj5, x5.list)
quasiNewton(obj5, x5.list, method = "quadraticinterpolation")
quasiNewton(obj5, x5.list, method = "goldensection")
conjugateGradient(obj5, x5.list)
conjugateGradient(obj5, x5.list, method = "quadraticinterpolation")
conjugateGradient(obj5, x5.list, method = "goldensection")
problem
point
?points
library("devtools")
#Functions Test for quasinewton and conjugateGradient
#Function 1 x* = [1,1,1] f(x*) = 0
f1 <- function(x) {
f1 <- x[1]^2 + 2*x[2]^2 + 3*x[3]^2 - 2*x[1] -4*x[2] -6*x[3] + 6
return(f1)
}
x1.list <- list(x = c(3,3,3), fx = f1(c(3,3,3)))
obj1 <- list(functionObj = f1)
load_all()
quasiNewton(obj1, x.list1)
quasiNewton(obj1, x1.list)
load_all()
quasiNewton(obj1, x1.list)
load_all()
quasiNewton(obj1, x1.list)
#Function 2 x* = [1,1], f1(x*) = 0
f2 <- function(x) {
f2 <- x[1]^4 - 2*(x[1]^2)*x[2] + x[1]^2 + x[2]^2 - 2*x[1] + 1
return(f2)
}
x2.list <- list(x = c(3,3), fx = f2(c(3,3)))
obj2 <- list(functionObj = f2)
quasiNewton(obj2, x2.list)
#Function3 x* = [2,1], f(x*) = 0
f3 <- function(x) {
f3 <- x[1]^4 - 8*x[1]^3 + 25*(x[1]^2) + 4*(x[2]^2) -4*x[1]*x[2] -32*x[1] + 16
return(f3)
}
x3.list <- list(x = c(3,3), fx = f3(c(3,3)))
obj3 <- list(functionObj = f3)
quasiNewton(obj3, x3.list)
#Function 4 x* = [1,1] f(x*) = 0
f4 <- function(x) {
f4 <- 100*(x[2] - x[1]^2)^2 + (1 - x[1])^2
return(f4)
}
x4.list <- list(x = c(1,1), fx = f4(c(1,1)))
quasiNewton(obj3, x4.list)
quasiNewton(obj4, x4.list)
obj4 <- list(functionObj = f4)
quasiNewton(obj4, x4.list)
#Function 5 - x* = [0.57085, -0.93955591, 0.7681755]
f5 <- function(x) {
f5 <- x[1]^4 + x[1]^3 - x[1] + x[2]^4 - x[2]^2 + x[2] + x[3]^2 - x[3] + x[1]*x[2]*x[3]
return(f5)
}
x5.list <- list(x = c(1,-1,1), fx = f5(c(1,-1,1)))
obj5 <- list(functionObj = f5)
quasiNewton(obj5, x5.list)
load_all()
