return(f1)
}
x1.list <- list(x = c(3,3,3), fx = f1(c(3,3,3)))
obj1 <- list(functionObj = f1)
quasiNewton(obj1, x1.list)
const <- list(xmin = c(2,2,2), xmax = c(4,4,4))
gradientproj(obj1, x1.list, cons)
gradientproj(obj1, x1.list, cons)
gradientproj(obj1, x1.list, cons)
load_all()
gradientproj(obj1, x1.list, cons)
load_all()
gradientproj(obj1, x1.list, cons)
load_all()
gradientproj(obj1, x1.list, cons)
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(0,0,0), xmax = c(4,4,4))
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(-5,2,4), xmax = c(4,4,4))
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(-5,-5,-5), xmax = c(4,4,4))
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(-5,2,1), xmax = c(4,4,4))
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(-5,2,1.1), xmax = c(4,4,4))
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(-5,-3,1.2), xmax = c(-1,3,4))
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(-5,-5,-5), xmax = c(-1,3,4))
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
const
const <- list(xmin = c(2,-3,1.2), xmax = c(5,3,4))
const
const <- list(xmin = c(2,-3,1.2), xmax = c(5,3,4))
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(-5,-3,0), xmax = c(5,3,4))
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(3,-3,0), xmax = c(5,3,4))
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(-5,-5,-5), xmax = c(5,3,4))
gradientproj(obj1, x1.list, const)
const <- list(xmin = c(-5,2,1), xmax = c(4,4,4))
gradientproj(obj1, x1.list, const)
#Function 2 x* = [1,1], f1(x*) = 0
f2 <- function(x) {
f2 <- x[1]^4 - 2*(x[1]^2)*x[2] + x[1]^2 + x[2]^2 - 2*x[1] + 1
return(f2)
}
x2.list <- list(x = c(3,3), fx = f2(c(3,3)))
obj2 <- list(functionObj = f2)
const2 <- list(xmin = c(0,0), xmax = c(2,2))
gradientproj(obj2, x2.list, const2)
const2 <- list(xmax = c(-5,-5), xmin = c(5,5))
gradientproj(obj2, x2.list, const2)
projection(x2.list$x, const)
projection(x2.list$x, const2)
#Function 1 x* = [1,1,1] f(x*) = 0
f1 <- function(x) {
f1 <- x[1]^2 + 2*x[2]^2 + 3*x[3]^2 - 2*x[1] -4*x[2] -6*x[3] + 6
return(f1)
}
x1.list <- list(x = c(3,3,3), fx = f1(c(3,3,3)))
obj1 <- list(functionObj = f1)
quasiNewton(obj1, x1.list)
const <- list(xmin = c(0,0,0), xmax = c(4,4,4))
#Function 2 x* = [1,1], f1(x*) = 0
f2 <- function(x) {
f2 <- x[1]^4 - 2*(x[1]^2)*x[2] + x[1]^2 + x[2]^2 - 2*x[1] + 1
return(f2)
}
x2.list <- list(x = c(3,3), fx = f2(c(3,3)))
obj2 <- list(functionObj = f2)
projection(x2.list$x, const2)
const2 <- list(xmin = c(0,0), xmax = c(2,2))
projection(x2.list$x, const2)
gradientproj(obj2, x2.list, const2)
const2 <- list(xmax = c(-4,-4), xmin = c(4,4))
gradientproj(obj2, x2.list, const2)
const <- list(xmax = c(-1,-1, -1), xmin = c(5,5,5))
gradientproj(obj1, x1.list, const)
projection(c(3,3,3), const)
const
load_all()
projection(c(3,3,3), const)
pmin(c(3,3,3), const$xmax)
load_all()
projection(c(3,3,3), const)
const
pmin(c(3,3,3), c(5,5,5))
pmax(c(3,3,3), c(-1,-1,-1))
load_all()
projection(c(3,3,3), const)
const
const <- list(xmin = c(-1,-1,-1), xmax = c(5,5,5))
gradientproj(obj1, x1.list, const)
projection(c(3,3,3), const)
f1(c(1,1,1))
x1.list <- list(x = c(0,0,0), fx = f1(c(0,0,0)))
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
library("devtools")
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
const
gradientproj(obj2, x2.list, const2)
const2
const2$xmin <- c(-4,-4)
const2$xmax <- c(4,4)
gradientproj(obj2, x2.list, const2)
const2$xmin <- c(0,0)
gradientproj(obj2, x2.list, const2)
const2 <- list(xmin = c(0,0), xmax = c(2,2))
x2.list <- list(x = c(3,3), fx = f2(c(3,3)))
obj2 <- list(functionObj = f2)
const2 <- list(xmin = c(0,0), xmax = c(2,2))
gradientproj(obj2, x2.list, const2)
quasiNewton(obj2, x2.list)
const
gradientproj(obj1, x1.list, const1)
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const1)
gradientproj(obj1, x1.list, const)
devtools::load_all()
?devtools::document
library("devtools")
gradientproj(obj2, x2.list, const2)
const2
gradientproj(obj1, x1.list, const)
const
const$xmin <- c(2,2,2)
const
gradientproj(obj1, x1.list, const)
quasiNewton(obj1, x1.list)
const$xmin <- c(2,0,2)
quasiNewton(obj1, x1.list)
gradientproj(obj1, x1.list, const)
const$xmin <- c(2,2,2)
const$xmin <- c(-4,-4,-4)
const$xmax <- c(0,0,0)
gradientproj(obj1, x1.list, const)
const$xmax <- c(2,2,2)
const$xmin <- c(-1,-1,-1)
gradientproj(obj1, x1.list, const)
gradientproj(obj1, x1.list, const, maxNI = 200)
#Function 1 x* = [1,1,1] f(x*) = 0
f1 <- function(x) {
f1 <- x[1]^2 + 2*x[2]^2 + 3*x[3]^2 - 2*x[1] -4*x[2] -6*x[3] + 6
return(f1)
}
x1.list <- list(x = c(2,2,2), fx = f1(c(2,2,2)))
obj1 <- list(functionObj = f1)
const$xmin <- c(2,2,2)
const$xmax <- c(5,5,5)
gradientproj(obj1, x1.list, const, maxNI = 200)
const$xmin <- c(0,0,0)
gradientproj(obj1, x1.list, const, maxNI = 200)
x1.list <- list(x = c(0,0,0), fx = f1(c(0,0,0)))
gradientproj(obj1, x1.list, const, maxNI = 200)
#Function3 x* = [2,1], f(x*) = 0
f3 <- function(x) {
f3 <- x[1]^4 - 8*x[1]^3 + 25*(x[1]^2) + 4*(x[2]^2) -4*x[1]*x[2] -32*x[1] + 16
return(f3)
}
x3.list <- list(x = c(3,3), fx = f3(c(3,3)))
obj3 <- list(functionObj = f3)
const3 <- list(xmin = c(0,0), xmax = c(5,5))
gradientproj(obj3, x3.list, const3, maxNI = 200)
const3 <- list(xmin = c(3,3), xmax = c(7,7))
gradientproj(obj3, x3.list, const3, maxNI = 200)
const3 <- list(xmin = c(-2,-2), xmax = c(0,0))
gradientproj(obj3, x3.list, const3, maxNI = 200)
const
load_all()
gradientproj(obj1, x1.list, const)
quasiNewton(obj1, x1.list)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
x1.list
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
const$xmin <- c(2,2,2)
gradientproj(obj1, x1.list, const)
const$xmin <- c(-22,-22,-22)
const$xmax <- c(-2,-2,-2)
gradientproj(obj1, x1.list, const)
x1.list <- list(x = c(-3,-3,-3), fx = f1(c(-3,-3,-3)))
gradientproj(obj1, x1.list, const)
x1.list
gradientproj(obj2, x2.list, const2)
const2
const2$xmin <- c(2,2)
const2$xmax <- c(5,5)
gradientproj(obj2, x2.list, const2)
const2$xmax <- c(2,5)
const2$xmin <- c(0,2)
gradientproj(obj2, x2.list, const2)
x1.list <- list(x = c(2,2,2), fx = f1(c(2,2,2)))
const$xmin <- (2,0,2)
const$xmin <- c(2,0,2)
const$xmax <- c(5,5,5)
gradientproj(obj1, x1.list,const)
x1.list <- list(x = c(7,7,7), fx = f1(c(7,7,7)))
const$xmax <- c(10,10,10)
gradientproj(obj1, x1.list,const)
#Function3 x* = [2,1], f(x*) = 0
f3 <- function(x) {
f3 <- x[1]^4 - 8*x[1]^3 + 25*(x[1]^2) + 4*(x[2]^2) -4*x[1]*x[2] -32*x[1] + 16
return(f3)
}
x3.list <- list(x = c(3,3), fx = f3(c(3,3)))
obj3 <- list(functionObj = f3)
const3 <- list(xmin = c(0,0), xmax = c(5,5))
gradientproj(obj3, x3.list, const3)
const3 <- list(xmin = c(3,4), xmax = c(10,10))
gradientproj(obj3, x3.list, const3)
x3.list <- list(x = c(5,5), fx = f3(c(5,5)))
gradientproj(obj3, x3.list, const3)
x3.list <- list(x = c(-2,-2), fx = f3(c(-2,-2)))
obj3 <- list(functionObj = f3)
const3 <- list(xmin = c(-7,-7), xmax = c(0,0))
gradientproj(obj3, x3.list, const3)
const3 <- list(xmin = c(-7,-7), xmax = c(7,7))
gradientproj(obj3, x3.list, const3)
x1.list != x2.list
x1.list == x2.list
x1.list$x != x2.list$x
?is.identical
?stop()
library("devtools")
load_all()
load_all()
const
x1.list
x1.list$x <- c(11,11,11)
gradientproj(obj1, x1.list, const1)
gradientproj(obj1, x1.list, const)
load_all()
gradientproj(obj1, x1.list, const)
c(1,2) + c(2,3)
coord <- matrix(1,2;2,3;3,2;5,-6)
coord <- as.matrix(1,2;2,3;3,2;5,-6)
coord <- matrix(nrow = 4, ncol = 4)
coord
coord <- matrix(nrow = 4, ncol = 2, c(1,2), c(2,3), c(2,4), c(1,1))
coord <- matrix(nrow = 4, ncol = 2, c(1,2), c(2,3), c(2,4))
coord
coord <- matrix(c(1,2,2,3,2,4,1,1), nrow = 4, ncol = 2)
coord
coord[1,]
for(i:1:4) coord[i,]
for(iin1:4) coord[i,]
for(i in 1:4) coord[i,]
coord
length(coord)
nrow(coord)
rosenbrock <- function(x) {
n <- length(x)
x1 <- x[2:n]
x2 <- x[1:(n-1)]
sum(100*(x1-x2^2)^2 + (1-x2)^2)
}
h1 <- c(8,4,2,0.5)
library("devtools")
load_all()
coord <- matrix(c(1,1,-1,-1,1,-1,-1,1), nrow = 4, ncol = 2)
hjalgorithm(c(0,0), rosenbrock, h1, coord)
warnings()
z <- hjalgorithm(c(0,0), rosenbrock, h1, coord)
z
warnings()
load_all()
z <- hjalgorithm(c(0,0), rosenbrock, h1, coord)
z
coord
h <- h1
searchD <- coord
xb <- x
x <- c(0,0)
xb <- x
xc <- x
flag <- 1 #used to signal failure and trigger a shrink step
out <- hjexplore(x, xc, obj, h[1], searchD)
obj <- rosenbrock
out <- hjexplore(x, xc, obj, h[1], searchD)
xb <- out[[1]]
xc <- out[[2]]
flag <- out[[3]]
while(identical(flag, 1)) {
d <- x - xb
xb <- x
xc <- x + d
out <- hjexplore(x, xc, obj, h[k], searchD)
xb <- out[[1]]
xc <- out[[2]]
flag <- out[[3]]
if(identical(flag, 0)) {
xc <- x
out <- hjexplore(x, xc, obj, h[k], searchD)
xb <- out[[1]]
xc <- out[[2]]
flag <- out[[3]]
}
}
xb <- x
xc <- x
flag <- 1 #used to signal failure and trigger a shrink step
obj <- rosenbrock
fb <- obj(xb)
d <- 0
flag <- 0
xcb <- xb
fcb <- fb
xt <- xc
p <- xt + h * searchD[1,]
search[1,]
searchD[1,]
h[1]*searchD[1,]
h <- h[1]
p <- xt + h * searchD[1,]
fp <- obj(p)
if(fp > fb) {
p <- xt - h * searchD[i,]
}else if (fp < fb) {
xt <- xcb
p <- xt
fb <- f(xcb)
}
if(!identical(xcb,xb)) {
flag = 1
xb <- xcb
}
p <- xt + h * searchD[2,]
fp <- obj(p)
if(fp > fb) {
p <- xt - h * searchD[i,]
}else if (fp < fb) {
xt <- xcb
p <- xt
fb <- f(xcb)
}
if(!identical(xcb,xb)) {
flag = 1
xb <- xcb
}
rosenbrock <- function(x) {
n <- length(x)
x1 <- x[2:n]
x2 <- x[1:(n-1)]
sum(100*(x1-x2^2)^2 + (1-x2)^2)
}
hjalgorithm(c(0,0), rosenbrock, h = 3, eps = 0,01)
hjalgorithm(c(0,0), rosenbrock, h = 3, eps = 0.01)
load_all()
hjalgorithm(c(0,0), rosenbrock, h = 3, eps = 0.01)
load_all()
hjalgorithm(c(0,0), rosenbrock, h = 3, eps = 0.01)
x1 <- c(0,0)
I <- diag(1, nrow = length(x1))
I
I <- rbind(I, diag(-1, nrow = length(x1)))
I
I2 <- rbind(diag(1, nrow = length(x1)), diag(-1, nrow = length(x1)))
I2
load_all()
hjalgorithm(c(0,0), rosenbrock, h = 3, eps = 0.01)
load_all()
hjalgorithm(c(0,0), rosenbrock, h = 3, eps = 0.01)
hjalgorithm(c(1,1), rosenbrock, h = 8, eps = 0.01)
x <- c(0,0)
obj <- rosenbrock
h <- 8
eps <- 0.01
searchD <- rbind(diag(1, nrow = length(x)), diag(-1, nrow = length(x)))
x.k <- x
for(i in 1:nrow(searchD)) {
x.k1 <- x
x.k1 <- x.k1 + h * searchD[i,]
if(obj(x.k1) < obj(x)) {
x <- x.k1
}
}
if(identical(x.k, x)) {
h <- h / 2
}
rosenbrock(x.k1)
rosenbrock(x)
x.k <- x
x.k1 <- x
x.k1 <- x.k1 + h * searchD[1,]
if(obj(x.k1) < obj(x)) {
x <- x.k1
}
x.k1 <- x
x.k1 <- x.k1 + h * searchD[2,]
x.k1 <- x
x.k1 <- x.k1 + h * searchD[2,]
if(obj(x.k1) < obj(x)) {
x <- x.k1
}
x.k1 <- x
x.k1 <- x.k1 + h * searchD[3,]
x <- x.k1
if(obj(x.k1) < obj(x)) {
x <- x.k1
}
load_all()
hjalgorithm(c(0,0), obj, h = 8, eps = 1e-6)
hjalgorithm(c(0,0), obj = rosenbrock, h = 8, eps = 1e-6)
load_all()
x3 <- c(0,0,0)
I3 <- rbind(diag(1, nrow = length(x3)), diag(-1, nrow = length(x3)))
I3
nrow(I3)
load_all()
f2 <- function(x) {
if(x < 0) {
f2 <- -x
} else {
f2 <- x
}
return(f2)
}
hjalgorithm(c(4,4), f2, h = 8, eps = 1e-6)
warnings()
hjalgorithm(4, f2, h = 8, eps = 1e-6)
hjalgorithm(20, f2, h = 10, eps = 1e-6)
f2 <- function(x) {
if(x < 0) {
f2 <- -x - 2
} else {
f2 <- x + 2
}
return(f2)
}
hjalgorithm(20, f2, h = 10, eps = 1e-6)
hjalgorithm(3, f2, h = 10, eps = 1e-6)
hjalgorithm(3, f2, h = 2, eps = 1e-6)
f2 <- function(x) {
if(x < 0) {
f2 <- -x + 2
} else {
f2 <- x + 2
}
return(f2)
}
hjalgorithm(3, f2, h = 2, eps = 1e-6)
